### 🔥 What is Encapsulation in Python?

**Encapsulation** is the concept of **bundling data (attributes)** and methods (functions) that operate on the data into a **single unit**, usually a class, and restricting access to certain components. It is a mechanism that helps in **restricting direct access** to some of the object's components and can prevent accidental modification of data.

In simpler terms, **encapsulation** is about **hiding the internal state** of an object and only allowing access through well-defined interfaces (methods).

---

## 📌 Why is Encapsulation Important?

1. **Data Protection**: By making attributes private, you prevent unwanted changes.
2. **Control**: You can define setter and getter methods to control how data is accessed or modified.
3. **Flexibility**: The internal implementation of the class can change, but the interface (public methods) remains the same.
4. **Readability**: Code that uses encapsulation is more organized and easy to maintain.

---

### ✅ How is Encapsulation Achieved in Python?

In Python, encapsulation is achieved by:
1. **Public Attributes**: Accessible from anywhere.
2. **Private Attributes**: Not accessible from outside the class.
3. **Protected Attributes**: Should be accessed only by the class or its subclasses.
4. **Getter and Setter Methods**: To access private attributes.

---

### 🚀 1. **Public and Private Attributes**

#### Public Attributes:
Public attributes are accessible from outside the class directly.

```python
class Person:
    def __init__(self, name, age):
        self.name = name  # Public attribute
        self.age = age    # Public attribute

p = Person("Alice", 30)
print(p.name)  # Accessible
print(p.age)   # Accessible
```

#### Private Attributes:
Private attributes are not directly accessible from outside the class. They are prefixed with `__`.

```python
class Person:
    def __init__(self, name, age):
        self.__name = name  # Private attribute
        self.__age = age    # Private attribute

    def display(self):  # Public method to access private attributes
        print(f"Name: {self.__name}, Age: {self.__age}")

p = Person("Alice", 30)
# print(p.__name)  # ❌ This will raise an error
p.display()  # Can access using a method
```

Python performs **name mangling** on private variables by internally changing the name to `_ClassName__variableName`. This prevents accidental access, but you can still access it (not recommended).

```python
print(p._Person__name)  # Technically works, but should be avoided.
```

---

### 🚀 2. **Protected Attributes**
Attributes prefixed with a single underscore `_` are **protected**, meaning they are intended to be used only within the class or by subclasses. However, they are **still accessible** from outside the class.

```python
class Person:
    def __init__(self, name, age):
        self._name = name  # Protected attribute
        self._age = age    # Protected attribute

    def display(self):
        print(f"Name: {self._name}, Age: {self._age}")

p = Person("Alice", 30)
print(p._name)  # Accessible, but convention suggests it shouldn't be accessed directly.
```

---

### 🚀 3. **Getter and Setter Methods**

While you can directly access public attributes, private attributes need **getter and setter methods** to retrieve or modify their values.

#### Getter and Setter Methods Example:

```python
class Person:
    def __init__(self, name, age):
        self.__name = name  # Private attribute
        self.__age = age    # Private attribute

    # Getter Method
    def get_name(self):
        return self.__name

    # Setter Method
    def set_name(self, name):
        self.__name = name

    def display(self):
        print(f"Name: {self.get_name()}, Age: {self.__age}")

p = Person("Alice", 30)
print(p.get_name())  # Accessing private attribute through getter
p.set_name("Bob")    # Changing private attribute through setter
p.display()  # Output: Name: Bob, Age: 30
```

By using getter and setter methods, you can also add additional logic (like validation) while accessing or modifying the attributes.

---

### ✅ 4. **Encapsulation in Action: Example with Validation**

```python
class BankAccount:
    def __init__(self, balance):
        self.__balance = balance  # Private attribute

    # Getter method
    def get_balance(self):
        return self.__balance

    # Setter method with validation
    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            print(f"Deposited: {amount}. New balance: {self.__balance}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > 0 and amount <= self.__balance:
            self.__balance -= amount
            print(f"Withdrew: {amount}. New balance: {self.__balance}")
        else:
            print("Invalid withdrawal amount.")

# Testing the BankAccount class
account = BankAccount(1000)
print(account.get_balance())  # Accessing balance via getter
account.deposit(500)  # Valid deposit
account.withdraw(200)  # Valid withdrawal
account.deposit(-50)  # Invalid deposit
```

Here, **deposit** and **withdraw** methods provide validation, enforcing rules to prevent incorrect balance changes.

---

## 📌 Summary of Encapsulation in Python:

| Feature                | Description                                                       |
|------------------------|-------------------------------------------------------------------|
| **Public Attributes**   | Accessible from anywhere.                                          |
| **Private Attributes**  | Hidden from outside (name mangling used internally).              |
| **Protected Attributes**| Intended to be used within the class or subclasses.               |
| **Getter Methods**      | Allows controlled access to private attributes.                   |
| **Setter Methods**      | Allows controlled modification of private attributes.             |

---

### ⚡ Key Benefits of Encapsulation:
- **Data Hiding**: Protects the internal state from unwanted external modifications.
- **Improved Control**: You can control how attributes are accessed or modified through methods.
- **Code Reusability**: Using encapsulation, code becomes more maintainable and modular.

---

Let me know if you'd like further examples or have more questions on encapsulation or any OOP concepts! 😎
